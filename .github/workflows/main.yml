# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
env:
  REGISTRY: infinireg.azurecr.io
  IMAGE_NAME: ${{ github.repository }}
  poo: infinireg.azurecr.io

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        services: [ {'imageName': 'actor-service', 'directory': './src/Backend/SteamRoller.Actors'}  ]

    permissions:
      contents: read
      packages: write

      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_ADMINUSERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          
      
          
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha
      
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          file: '${{ matrix.services.directory }}/Dockerfile'
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ./src
      
      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=image-${{ matrix.services.imageName }}::${{ env.poo }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'
  
    outputs:
      containerImage-actor: ${{ steps.image-tag.outputs.image-actor-service }}
      
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.outputs.containerImage-actor != '' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    
      - run: |
              echo '${{needs.build.outputs.containerImage-actor}}'
      - run: |
              echo '${{needs.build.outputs}}'  

      - name: Deploy bicep
        uses: azure/CLI@v1
        with:
        
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l northeurope
            az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deployment/main.bicep \
             -p \
                minReplicas=0 \
                actorImage='${{ needs.build.outputs.containerImage-actor }}' \
                actorPort=80 \
                containerRegistry=${{ env.REGISTRY }} \
                containerRegistryUsername=${{ secrets.ACR_ADMINUSERNAME }} \
                containerRegistryPassword=${{ secrets.ACR_PASSWORD }}
